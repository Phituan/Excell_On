// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(DbContextExcellOn))]
    partial class DbContextExcellOnModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication1.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AccountIsDelete");

                    b.Property<bool>("AccountIsLocked");

                    b.Property<string>("AccountPassword");

                    b.Property<string>("AccountUserName");

                    b.Property<Guid>("EmployeeId");

                    b.Property<string>("RoleName");

                    b.HasKey("AccountId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("WebApplication1.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyAddress");

                    b.Property<string>("CompanyDescription");

                    b.Property<string>("CompanyEmail");

                    b.Property<bool>("CompanyIsDelete");

                    b.Property<string>("CompanyLogo");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyPhone");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("WebApplication1.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DepartmentId");

                    b.Property<string>("EmployeeAddress");

                    b.Property<string>("EmployeeAvatar");

                    b.Property<DateTime?>("EmployeeDateOfBirth");

                    b.Property<string>("EmployeeEmail");

                    b.Property<string>("EmployeeFirtName");

                    b.Property<bool?>("EmployeeGender");

                    b.Property<bool>("EmployeeIsDelete");

                    b.Property<string>("EmployeeLastName");

                    b.Property<string>("EmployeePhoneNumber");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("WebApplication1.Models.OrderOfService", b =>
                {
                    b.Property<Guid>("OrderOfServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("OrderOfServiceBillDate");

                    b.Property<DateTime>("OrderOfServiceCreatedAt");

                    b.Property<string>("OrderOfServiceDescription");

                    b.Property<bool>("OrderOfServiceIsDelete");

                    b.Property<DateTime>("OrderOfServicePaymentDate");

                    b.Property<string>("OrderOfServicePaymentMethod");

                    b.Property<int>("OrderOfServicePrice");

                    b.Property<int>("OrderOfServiceStatus");

                    b.HasKey("OrderOfServiceId");

                    b.ToTable("OrderOfService");
                });

            modelBuilder.Entity("WebApplication1.Models.OrderOfServiceDetail", b =>
                {
                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("OrderOfServiceId");

                    b.Property<DateTime>("OrderOfServiceDetailFromDate");

                    b.Property<bool>("OrderOfServiceDetailIsDelete");

                    b.Property<int>("OrderOfServiceDetailNumberOfEmployee");

                    b.Property<int>("OrderOfServiceDetailPrice");

                    b.Property<DateTime>("OrderOfServiceDetailToDate");

                    b.HasKey("ServiceId", "OrderOfServiceId");

                    b.HasIndex("OrderOfServiceId");

                    b.ToTable("OrderOfServiceDetail");
                });

            modelBuilder.Entity("WebApplication1.Models.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyCompanyId");

                    b.Property<Guid>("EmployeeEmployeeId");

                    b.Property<string>("ServiceCharge");

                    b.Property<string>("ServiceDescription");

                    b.Property<string>("ServiceImage");

                    b.Property<bool>("ServiceIsDelete");

                    b.Property<string>("ServiceName");

                    b.Property<int>("ServicePrice");

                    b.Property<Guid>("ServiceTypeServiceTypeId");

                    b.HasKey("ServiceId");

                    b.HasIndex("CompanyCompanyId");

                    b.HasIndex("EmployeeEmployeeId");

                    b.HasIndex("ServiceTypeServiceTypeId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("WebApplication1.Models.ServiceType", b =>
                {
                    b.Property<Guid>("ServiceTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ServiceTypeName");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("WebApplication1.Models.Account", b =>
                {
                    b.HasOne("WebApplication1.Models.Employee", "Employee")
                        .WithOne("Account")
                        .HasForeignKey("WebApplication1.Models.Account", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.OrderOfServiceDetail", b =>
                {
                    b.HasOne("WebApplication1.Models.OrderOfService", "OrderOfService")
                        .WithMany("OrderOfServiceDetail")
                        .HasForeignKey("OrderOfServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Service", "Service")
                        .WithMany("OrderOfServiceDetail")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Service", b =>
                {
                    b.HasOne("WebApplication1.Models.Company", "CompanyCompany")
                        .WithMany("Service")
                        .HasForeignKey("CompanyCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.Employee", "EmployeeEmployee")
                        .WithMany("Service")
                        .HasForeignKey("EmployeeEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication1.Models.ServiceType", "ServiceTypeServiceType")
                        .WithMany("Service")
                        .HasForeignKey("ServiceTypeServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
